
All HTML elements are selectors

We've used a number of HTML elements as CSS selectors so far: we've styled the HTML tags <h1></h1> with the CSS selector h1, <p></p> with p, and so on.

You may have guessed this, but if not, we'll say it outright: any HTML element can be a CSS selector! You can modify <ul>s, <table>s, and even the entire <body> by selecting ul, table, and body, respectively.

Multiple Selectors

As you've seen, it's possible to nest HTML elements inside one another, like so:

<div>
    <div>
        <p>I like tacos!</p>

So what if you want to grab <p>s that are inside two <div>s, and not all <p>s?

You select those in the CSS tab like this:

div div p {
    /*CSS stuff!*/
}


One selector to rule them all

There's also a very special selector you can use to apply CSS styling to every element on the page: the * selector. For example, if you type

* {
    border: 2px solid black;
}

You'll create a two-pixel wide solid black border around every element on the HTML page.


Parents, children, and siblings

If you think of the <html> tag as the trunk of the tree, you can think of its immediate branches—<head> and <body>—as its children. Both tags are children of <html>, and <html> is their parent element. Because they are both immediate children of <html> (that is, they are both only one element away), they are siblings.

Just like a real family, elements have children, grandchildren, great-grandchildren, and so on (though we don't make this distinction with HTML—a child of an element, and all that child's children, are children of the first parent).



Can you swing it?

Good work! Let's try something a little more involved.

Remember, you can reach an element that is a child of another element like this:

div div p { /* Some CSS */ }

where in this case, we'd be grabbing any <p> that is nested somewhere inside a <div> that is nested somewhere inside another <div>. If you want to grab direct children—that is, an element that is directly nested inside another element, with no elements in between—you can use the > symbol, like so:

div > p { /* Some CSS */ }

This only grabs <p>s that are nested directly inside of <div>s; it won't grab any paragraphs that are, say, nested inside lists that are in turn nested inside <div>s.



Can you swing it?

Good work! Let's try something a little more involved.

Remember, you can reach an element that is a child of another element like this:

div div p { /* Some CSS */ }

where in this case, we'd be grabbing any <p> that is nested somewhere inside a <div> that is nested somewhere inside another <div>. If you want to grab direct children—that is, an element that is directly nested inside another element, with no elements in between—you can use the > symbol, like so:

div > p { /* Some CSS */ }

This only grabs <p>s that are nested directly inside of <div>s; it won't grab any paragraphs that are, say, nested inside lists that are in turn nested inside <div>s.



See it to believe it

Excellent! You've got the hang of this, and you're starting to learn more about cascading.

As we mentioned, certain selectors will "override" others if they have a greater specificity value. ul li p { is more specific CSS than just p {, so when CSS sees tags that are both <p> tags and happen to be inside unordered lists, it will apply the more specific styling (ul li p {) to the text inside the lists.

There are two selectors that are even more specific than nested selectors like the ones above: classes and IDs. Check them out in the editor to the right.


Keeping it classy

Classes are useful when you have a bunch of elements that should all receive the same styling. Rather than applying the same rules to several selectors, you can simply apply the same class to all those HTML elements, then define the styling for that class in the CSS tab.

Classes are assigned to HTML elements with the word class and an equals sign, like so:

<div class="square"></div>
<img class="square"/>
<td class="square"></td>

Classes are identified in CSS with a dot (.), like so:

.square {
    height: 100px;
    width: 100px;
}

This allows you to take elements of different types and give them the same styling.


ID, please!

IDs, on the other hand, are great for when you have exactly one element that should receive a certain kind of styling.

IDs are assigned to HTML elements with the word id and an equals sign:

<div id="first"></div>
<div id="second"></div>
<p id="intro"></p>

IDs are identified in CSS with a pound sign (#):

#first {
    height: 50px;
}

#second {
    height: 100px;
}

#intro {
    color: #FF0000;
}

This allows you to apply style to a single instance of a selector, rather than all instances.
______

Even finer control

You've learned about class selectors. Now it's time to learn about pseudo-class selectors.

A pseudo-class selector is a way of accessing HTML items that aren't part of the document tree (remember the tree structure we talked about earlier?). For instance, it's very easy to see where a link is in the tree. But where would you find information about whether a link had been clicked on or not? It isn't there!

Pseudo-class selectors let us style these kinds of changes in our HTML document. For example, we saw we could change a link's text-decoration property to make it something other than blue and underlined. Using pseudo selectors, you can control the appearance of unvisited and visited links—even links the user is hovering over but hasn't clicked!

The CSS syntax for pseudo selectors is

selector:pseudo-class_selector {
    property: value;
}

It's just that little extra colon (:).
___


Links

There are a number of useful pseudo-class selectors for links, including:

a:link: An unvisited link.
a:visited: A visited link.
a:hover: A link you're hovering your mouse over.

stylesheet.css
a:link{
    
  color: #008B45; 
  text-decoration: none;
}

a:hover {
    color: #00F00;
}

a:visited {
    
   color: #EE9A00; 
}
___


First child

Another useful pseudo-class selector is first-child. It's used to apply styling to only the elements that are the first children of their parents. For instance:

p:first-child {
    color: red;
}

Would make all paragraphs that are the first children of their parent elements red.
___

Nth child

Well done! You can actually select any child of an element after the first child with the pseudo-class selector nth-child; you just add the child's number in parentheses after the pseudo-class selector. For example,

p:nth-child(2) {
    color: red;
}

Would turn every paragraph that is the second child of its parent element red.

The element that is the child goes before :nth-child; its parent element is the element that contains it.

